/*
  File: my_datapack.lm

  This Limbo file demonstrates advanced DSL features for Minecraft datapacks.
  Each DSL block is preceded by comments showing what Minecraft commands might be generated.
*/

/* ---------------------------------------------------------------------------
   Example: Raw Minecraft Function (Direct Mapping)
   DSL Function: fun teleport_player(entity)

   // MC Commands:
   // ------------------------------------------------
   // tp <entity> ~ ~100 ~
   // ------------------------------------------------
*/
fun teleport_player(entity) {
    // Directly maps to a Minecraft teleport command.
    tp entity ~ ~100 ~;
}

/* ---------------------------------------------------------------------------
   Example: Conditional Execution
   DSL Function: def teleport_if_on_grass(entity)

   // MC Commands:
   // ------------------------------------------------
   // execute as <entity> if block ~ ~-1 ~ minecraft:grass_block run tp <entity> ~ ~100 ~
   // execute as <entity> unless block ~ ~-1 ~ minecraft:grass_block run say "Entity not on grass"
   // ------------------------------------------------
*/
def teleport_if_on_grass(entity) {
    // Check if the block beneath the entity is a grass block.
    if (entity.block_at(0, -1, 0) == "minecraft:grass_block") {
         teleport_player(entity);
    } else {
         // Fallback for debugging.
         say "Entity not on grass";
    }
}

/* ---------------------------------------------------------------------------
   Example: Looping Over Entities
   DSL Function: def teleport_all_on_grass()

   // MC Commands:
   // ------------------------------------------------
   // execute as @a if block ~ ~-1 ~ minecraft:grass_block run tp @s ~ ~100 ~
   // ------------------------------------------------
   // (The compiler loops over all players using selector @a.)
*/
def teleport_all_on_grass() {
    // Iterate over all players using a loop construct.
    for (player in players(@a)) {
         if (player.block_at(0, -1, 0) == "minecraft:grass_block") {
             teleport_player(player);
         }
    }
}

/* ---------------------------------------------------------------------------
   Example: Simulated Error Handling (Try/Catch)
   DSL Function: def safe_teleport(entity, height)

   // MC Commands:
   // ------------------------------------------------
   // scoreboard objectives add height dummy
   // scoreboard players set <entity> height <entity.position.y>
   // scoreboard players add <entity> height <height>
   // tp <entity> <entity.position.x> <newY> <entity.position.z>
   //
   // (In case of failure, an alternative command block or function is called:)
   // execute unless <successful_condition> run say "Teleport failed for <entity>"
   // ------------------------------------------------
*/
def safe_teleport(entity, height) {
    try {
         // Calculate new Y-coordinate using scoreboard math.
         let newY = entity.position.y + height;
         // Teleport using the computed newY.
         tp entity entity.position.x newY entity.position.z;
    } catch (error) {
         // If an error is caught, output a failure message.
         say "Teleport failed for " + entity.name;
    }
}

/* ---------------------------------------------------------------------------
   Example: Inline/Anonymous Function (Lambda)
   DSL Function: def greet_and_teleport(player)

   // MC Commands:
   // ------------------------------------------------
   // say "Welcome <player.name>"
   // tp <player> ~ ~50 ~
   // ------------------------------------------------
   // (This inline lambda is inlined in the function execution.)
*/
def greet_and_teleport(player) {
    // Define a lambda function to greet and then teleport.
    let greet = (p) => {
         say "Welcome " + p.name;
         tp p ~ ~50 ~;
    };
    // Execute the lambda for the given player.
    greet(player);
}

/* ---------------------------------------------------------------------------
   Example: Scheduling a Per-Tick Operation
   DSL Function: def on_tick()

   // MC Commands:
   // ------------------------------------------------
   // (This function is scheduled to run every game tick, e.g., via /schedule)
   // execute as @a run function mypack:teleport_if_on_grass
   // ------------------------------------------------
   // (The compiler ensures that on_tick runs every tick.)
*/
def on_tick() {
    // Run per-tick checks on every player.
    for (p in players(@a)) {
         teleport_if_on_grass(p);
    }
}

/* ---------------------------------------------------------------------------
   Example: Higher-Order Function for Common Operations
   DSL Function: def apply_to_all(entities, action)

   // MC Commands:
   // ------------------------------------------------
   // (The compiler translates this to iterating the selector and applying the action.)
   // For each entity in entities: action(<entity>)
   // ------------------------------------------------
*/
def apply_to_all(entities, action) {
    for (entity in entities) {
         action(entity);
    }
}

/* ---------------------------------------------------------------------------
   Example: Using Higher-Order Function to Teleport Players on Grass
   DSL Function: def teleport_players_on_grass()

   // MC Commands:
   // ------------------------------------------------
   // execute as @a if block ~ ~-1 ~ minecraft:grass_block run tp @s ~ ~100 ~
   // ------------------------------------------------
*/
def teleport_players_on_grass() {
    // Use the higher-order function to apply an action to each player.
    apply_to_all(players(@a), (player) => {
         if (player.block_at(0, -1, 0) == "minecraft:grass_block") {
             teleport_player(player);
         }
    });
}
